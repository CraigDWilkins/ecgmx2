/*
 * This file is part of MobilECG, an open source clinical grade Holter
 * ECG. For more information visit http://mobilecg.hu
 *
 * Copyright (C) 2016  Robert Csordas, Peter Isza
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef SRC_ADS1298_H
#define SRC_ADS1298_H

#include <stdint.h>
//#include "mbed.h"
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_spi.h"
#include "CircularBufferCommon.h"
#include "ecg.h"

#define ADS1298_MAX_PACKET_LENGTH ((8+1)*24)
#define resetHi() HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET)
#define resetLo() HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET)
#define pwdnHi() HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET)
#define pwdnLo() HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET)
#define pinStartHi() HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET)
#define pinStartLo() HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET)
#define diffSelHi() HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET)
#define diffSelLo() HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET)
#define ecgcsHi() HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET)
#define ecgcsLo() HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET)
//class ADS1298 {
//	private:
		//typedef CircularBufferCommon<uint8_t, 4096, true> EcgBuffer;


//		DigitalOut reset;
//		DigitalOut pwdn;
//		DigitalOut pinStart;
//		DigitalOut diffSel;

//		char dmaDestBuffer[ADS1298_MAX_PACKET_LENGTH];
//		char zeroBuffer[ADS1298_MAX_PACKET_LENGTH];

		enum Register {REG_ID=0, REG_CONFIG1=1, REG_CONFIG2=2, REG_CONFIG3=3, REG_RLD_SENSP=0x0d, REG_RLD_SENSN=0x0e, REG_WCT1=0x18, REG_WCT2=0x19};
		enum Command {CMD_WAKEUP = 0x02, CMD_RREG = 0x20, CMD_WREG = 0x40, CMD_SDATAC = 0x11, CMD_START = 0x08, CMD_RDATAC = 0x10, CMD_STOP = 0x0A};
		enum SpeedDiv {DIV_64=0, DIV_128, DIV_256, DIV_512, DIV_1024, DIV_2048, DIV_4096, DIV_8192};

//		int nHardwareChannels;
//		int selectedChannels;
//		int dataTransferSize;
//		uint32_t sampleId;
//
//		static const int FCLK=2000000;
//
//		float realFreq;

		void ADS1298Init();
	//public:
	//	static ADS1298& instance();

	bool ADS1298_start(); //Serial *pc);
		void ADS1298_stop();
bool ADS1298_setNormalMode();

void ADS1298_interrupt();
uint32_t ADS1298_getSampleId();
uint8_t ADS1298_getActiveChannels();

int ADS1298_getAvailableData();
void ADS1298_getSample(int32_t *data);
void ADS1298_clear();

float ADS1298_getLsbInMv();
	//private:
		//static const float ECG_LSB_IN_MV;

		//float currLsbInMv;

void ADS1298_sendCommand(Command cmd);
void ADS1298_writeReg(Register reg, uint8_t value);
uint8_t ADS1298_readReg(Register reg);
float ADS1298_setSpeed(SpeedDiv div, bool highRes = true);
void ADS1298_enableIrq();
void ADS1298_disableIrq();

void ADS1298_setGain(int gain);
static Register ADS1298_chSetReg(int channel);

//		bool dmaRunning;

		//EcgBuffer ecgBuffer;
	

//};
extern circular_buf_t ecgBuffer;
#endif
